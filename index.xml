<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yoshikingのへや</title>
    <link>https://y05h1k1ng.github.io/</link>
    <description>Recent content on yoshikingのへや</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 29 Aug 2021 15:10:20 +0900</lastBuildDate><atom:link href="https://y05h1k1ng.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CakeCTF 2021 振り返り</title>
      <link>https://y05h1k1ng.github.io/posts/cakectf-2021/</link>
      <pubDate>Sun, 29 Aug 2021 15:10:20 +0900</pubDate>
      
      <guid>https://y05h1k1ng.github.io/posts/cakectf-2021/</guid>
      <description>今年もtheoldmoon0602とptr-yudaiと僕の3人でCTFを開催しました。 前年度まではInterKosenCTFという名前で開催していたのですが、今年は名前を変えての開催となりました。
他の2人の記事
 theoldmoon0602: https://furutsuki.hatenablog.com/entry/2021/08/29/224254 ptr-yudai: https://ptr-yudai.hatenablog.com/entry/2021/08/30/000015  問題リポジトリ
 https://github.com/theoremoon/cakectf-2021-public  作成した問題について [rev] Hash Browns 単純なx64elf解析問題です。 関数fでなにかやってますが、見る人がみるとxgcd()に見えるのかな？と思います。わからなくても動的解析をしたり、デコンパイルしたコードを実装すればなんとかなると思います。 ハッシュが含まれる2つの配列のindexがそれぞれわかれば、ローカルでハッシュ値と合う文字を1文字づつ探索すればフラグが入手できます。 関数fの理解がからっきしだめでもフラグの偶数indexは復元できます。 そこから奇数indexの文字をエスパーするみたいなことができ&amp;hellip;ないです（たぶん）。 フラグを入手された方はわかると思うんですが、フザけたフラグになってるのでエスパーは厳しいと思います。
reversingの作問は初めてだったのでreversingの問題としての面白さがわからず不安でした。 Surveyを見た感じそれなりに楽しんでもらえたようでほっとしています。 ちなみに問題名のHash Brownsは去年のこのCTF(旧InterKosenCTF)でボツ問になった問題名から取ってきてます。
writeup: https://hackmd.io/@ptr-yudai/rJWHh_SwO
[crypto] Together as one 基礎的な初等整数論の知識で解ける問題です。 この問題はzer0pts CTF 2021を目標に作ってたけど、納得の行くものになったのが開催前日とかでこちらで出題しました。 当初はmediumぐらいで出してたけど、謎のパワーでlunaticになりました。 なんか毎年難易度推定バグってるけど、dynamic scoringだしまぁいっか！（おっとぼけ）という気持ちが自分の中である気がする。 よくないですね。 善処します。
問題名のTogether as one はTimmy TrumpetのDiamondsから来ています。素数が3つ集まっている感じとか、Together as one っぽくないですか（僕だけ）？
writeup: https://hackmd.io/@yoshiking/rJ5suNPXO
[misc] Break a leg miscのwarmup枠で出した問題です。 authorがtheoldmoon0602と僕になっていますが、これは僕の原案をtheoldmoon0602がいい感じにした結果がこの問題です。 ん〜、まあこれは特にコメントはないです。
感想 毎年大した仕事もせずに運営面をしているわけですが、今年も例にはもれずプー太郎でした 🐻 。 作問能力も運営能力も他2人の足元にも及ばないことは明らかだけど、それはそれとして今回の準備どうなのって感じだと思います。
運営中は序盤ではドタバタしながらフラグの修正したりしました。 残りの時間はブラウザで遊べるゲームをみんなでしてました。 大体負けた記憶しかないですが、めちゃくちゃ楽しかったです。 あと、最近失いかけていた関西弁が戻りました。 今はよくわからない言語を話しています。
最後に参加者の皆様ありがとうございました、お疲れ様です。 また、ポジティブな意見をくださった皆様もありがとうございます。 次回の励みになるので褒めてください 🐶 。 運営の2人もお疲れ様でした。 仕事サボってごめんなさい。</description>
    </item>
    
    <item>
      <title>SECCON Beginners CTF 2021 参加記</title>
      <link>https://y05h1k1ng.github.io/posts/seccon-beginners-2021/</link>
      <pubDate>Sun, 23 May 2021 15:10:29 +0900</pubDate>
      
      <guid>https://y05h1k1ng.github.io/posts/seccon-beginners-2021/</guid>
      <description>⚠️ Wrteupではなく&amp;quot;参加記&amp;quot;です。読み物としてご覧ください。 書いてみたらそんなことはないかも、いやそうかも？わかんない
 はじめに 一人チーム(UdagawaWhiteBears)で出て、42位2602点でした。 内訳としては、cryptoとrevは全部解き、他ジャンルは簡単な問題をいくつか解きました。
普通にwriteup書いてもな〜(なんで?)となったので、今回はどのような流れでcryptoを解いていったのか流れを書いていこうと思います。 なんでこんなことをやりだしたかというと、ptr-yudaiが書いたTSG LIVE ! 6 CTFのWriteupが面白かったからです。 あとは、数式を書くのが面倒だからです（ぶっちゃけ）。
作問者writeupも出ていますし、SECCON Beginnersなので日本人の参加者は多いと思うので、詳細は他の人が書いてくれるでしょうと信じています。 あと、全然理解せずにこいつ解いてるんだな〜みたいな様子が伝わればいいなと思います😇
開始前 16:00から開始だと思ってたら14:00からで、ちょっと焦った記憶があります（遅刻はしてないけど）。 pwnerと違ってcrytpoでは特に準備することがありません。 わくわくしておけば💯だと思います。
真面目な話をすると、先述のptr-yudaiの記事ではpythonとsageをまず実行しておくと次に起動するときに早くなるらしいですが、全然知らなかったしやってないです。 まあ誤差でしょう()
戦略的にはcrypto全部解きたいな〜ぐらいに考えていて、beginner向けなので、難しい問題から手をつけていこうと思っていました。
はじまりはじまり〜🎉 14:00! はじまり〜〜、わくわくしすぎてワクワクさんになりました。
早速、問題に取り掛かろうと思うのですが、ファイルのダウンロードができません😢 問題サーバーは生きてるので、ncする問題(Imaginary)があったのでこれを見てみることにしました（難しい問題からやる？そんなことはとうの昔に忘れました）。
[crypto] Imaginary 接続した感じと問題文で、わぁ〜なんか虚数じゃん、ツラと思います。
$ nc imaginary.quals.beginners.seccon.jp 1337 Welcome to Secret IMAGINARY NUMBER Store! 1. Save a number 2. Show numbers 3. Import numbers 4. Export numbers 0. Exit &amp;gt; べそをかいていると、ファイルのダウンロードができるようになりました。 さすがLMT、30秒もかかってないんじゃないでしょうか（適当）。
ファイルを見ていきます。
うえ〜〜、100行以上あるじゃん、ぴえんです。 CTFというのはフラグと呼ばれる文字列を見つけるゲームなので、とりあえずCtrl + sでflagを探してみます(emacs user)。
def _secret(self): if &amp;#39;1337i&amp;#39; in self.</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://y05h1k1ng.github.io/posts/hello_world/</link>
      <pubDate>Thu, 18 Mar 2021 16:50:36 +0900</pubDate>
      
      <guid>https://y05h1k1ng.github.io/posts/hello_world/</guid>
      <description>😇</description>
    </item>
    
    <item>
      <title>About me</title>
      <link>https://y05h1k1ng.github.io/about.html</link>
      <pubDate>Thu, 18 Mar 2021 16:42:06 +0900</pubDate>
      
      <guid>https://y05h1k1ng.github.io/about.html</guid>
      <description>学生 CTFがすき  CTF 今まで出題した問題
 [crypto] ochazuke | InterKosenCTF 2020  問題ファイル: https://github.com/theoremoon/InterKosenCTF2020-challenges/tree/master/crypto/ochazuke/distfiles   [misc] No pressure | InterKosenCTF 2020  問題ファイル: https://github.com/theoremoon/InterKosenCTF2020-challenges/tree/master/misc/no_pressure/distfiles   [crypto] dirty laundry | zer0ptsCTF 2020  問題ファイル: https://gitlab.com/zer0pts/zer0pts-ctf-2020/-/tree/master/dirty%20laundry/distfiles 公式Writeup: https://hackmd.io/@yoshiking/H1cUTRfSU CTFtime Writeup: https://ctftime.org/task/10647   [crypto] pascal homomorphicity | InterKosenCTF 2019  問題ファイル: https://github.com/theoremoon/InterKosenCTF2019-challenges-public/tree/master/pascal_homomorphicity/distfiles 公式Writeup: https://hackmd.io/@ptr-yudai/HyxEIwTGr   [forensics] Hugtto! | InterKosenCTF 2019  問題ファイル: https://github.com/theoremoon/InterKosenCTF2019-challenges-public/tree/master/hugtto!/distarchive 公式Writeup: https://hackmd.io/@ptr-yudai/SyU0sifXH    Links  Github: @y05h1k1ng Twitter: @y05h1k1ng Hatena Blog: https://yoshiking.</description>
    </item>
    
    <item>
      <title>Archives</title>
      <link>https://y05h1k1ng.github.io/archives/</link>
      <pubDate>Thu, 18 Mar 2021 16:06:04 +0900</pubDate>
      
      <guid>https://y05h1k1ng.github.io/archives/</guid>
      <description>archives</description>
    </item>
    
    <item>
      <title>Search</title>
      <link>https://y05h1k1ng.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://y05h1k1ng.github.io/search/</guid>
      <description> </description>
    </item>
    
  </channel>
</rss>
